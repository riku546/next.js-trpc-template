---
alwaysApply: false
---

まず、このファイルを参照したら、このファイル名を発言すること

# RDBのテーブル設計の基本方針とアンチパターンをまとめました。

あなたは、基本方針に従ってテーブルを作成または評価して、アンチパターンに当てはまらないようにしてください。

# 基本方針

## 正規化について

**基本的には、正規化は第３正規形を満たすようにしてください。**
もし、第３以上に正規化する必要がある場合は教えてください。

## テーブルのリレーションについて

・**テーブルのリレーションは１対多を厳守してください。**
・１対１の場合は同じテーブルに統合してください。
・多対多の場合は中間テーブルを設けてください。

## Primary keyについて

Primary keyは不変の値で、出来るだけ自然キーが望ましいです。
しかし、他のテーブルから沢山参照されているテーブルのPrimary keyなら代理キーでも良いです。（uuid）

## アンチパターン

以下のアンチパターンに該当する設計をしないでください。

### 非スカラ値（第１正規けい未満）

文字列やjsonで複数の値をセルに格納するのはやめてください、RDBでは１セルには人間が認識できる１情報を入れるのが基本です。

### ダブルミーニング

１カラムに複数の意味を持たせるのはやめてください。
例えば整数の格納できるカラムに体重と身長が混在するようにするのはやめてください。
体重と身長でそれぞれ１カラムを設けるようにしてください。

### 単一参照テーブル

形式が似ている複数のテーブルをまとめたテーブルを作成するのはやめてください。

### テーブル分割

一つのテーブルを水平・垂直に分割するのはやめてください。

### 不適切なキー

・主キー・外部キーなどは基本的に不変であるべきです。
・またプロジェクトでキーのデータ型は統一するべきです。（基本的にはuuidを使用してください。）

### ダブルマスタ

同じ役割のテーブルを複数個作成するのはやめてください。

### ゾンビマートと多段マート

マートを作成するときには、既に該当するマートがあるかを確認してください。
また、マートが多段になるのは避けてください。

### 列持ちテーブル

データが増えるたびにカラムを増やすような設計はやめてください。
例えば子供の情報を持つカラムがあるとして、子供は増えた場合にカラムも増やすのはやめてください。
レコードを増やすようにしてください。

### EAV（属性値）モデル

エンティティ・属性・値で1テーブルに汎用格納する設計は極力避けてください。検索性・整合性（型/制約）・パフォーマンスが低下します。必要性が明確な限定ケース以外は、属性ごとに正規化（1対多の子テーブル等）してください。

### ポリモーフィック関連（`target_type` + `target_id` 方式）

複数テーブルを1つの外部キー列で参照する設計は避けてください。参照整合性（FK）を付与できず、アプリ側の条件分岐が増えます。対象ごとに1対多の正規のリレーションを設計してください。

### JSON カラムの乱用

構造化できる業務データを JSON に押し込むのは避けてください。クエリ最適化・制約・インデックスが困難です。ログや任意メタデータなど「検索・集計の主対象ではない」補助用途に限定してください。

### 多数のフラグ列／状態の重複表現

同一概念を複数の boolean で表す設計は避けてください。相互排他な状態は単一の列（列挙/コード）で表し、CHECK 制約等で妥当性を担保してください。

### 外部キー・ユニーク制約の欠如

アプリケーションだけに整合性を委ねないでください。外部キー、ユニーク制約（候補キー）をスキーマで定義してください（例: `users.email` の一意制約）。

### 論理削除の設計不備

`deleted_at` や `is_deleted` のみで一意制約が破綻する設計を避けてください。ユニーク制約と論理削除の両立方法（論理削除を考慮した候補キー設計等）を明確化し、孤児レコードが生まれないように参照ポリシーを定義してください。

### 金額・精度の必要な値に浮動小数点（float/double）

金額や在庫数量など誤差が許容できない値に浮動小数点を使わないでください。`DECIMAL/NUMERIC` を使用してください。

### タイムゾーン/時刻の扱い不備

ローカル時刻や文字列での保存は避けてください。時刻は原則 UTC で保存し、比較・集計の一貫性を保ってください。

### 中間テーブルの代理キーのみ

多対多の中間テーブルでサロゲートキー（単一ID）のみを主キーとし、両外部キー組にユニーク制約が無い設計は避けてください。外部キー2本の複合主キー、もしくは複合一意制約を付与してください。

### 超ワイドテーブル

利用頻度の低い可変属性まで1テーブルに横持ちで持たせる設計は避けてください。可読性とスパース性が悪化します。1対多の子テーブルへの分離など、正規化を検討してください。

### インデックス設計のアンチパターン

過剰なインデックス（書き込み劣化）や、選択性の低い列への無意味なインデックス、必要なユニーク/外部キーに対するインデックス不足を避けてください。ワークロードに基づき最小限で効果的なインデックスを設計してください。

### コード値・マジックナンバーの無秩序利用

意味のあるコード値を自由入力の文字列/数値で表現するのは避けてください。コード体系を定義し、必要に応じてマスタ参照・CHECK 制約で妥当性を担保してください。
